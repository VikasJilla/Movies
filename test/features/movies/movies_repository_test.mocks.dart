// Mocks generated by Mockito 5.3.2 from annotations
// in movies/test/features/movies/movies_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/features/movies/data_sources/movies_local_data_source.dart'
    as _i6;
import 'package:movies/features/movies/data_sources/movies_remote_data_source.dart'
    as _i3;
import 'package:movies/models/movie.dart' as _i5;
import 'package:movies/models/movie_detailed.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDetailed_0 extends _i1.SmartFake implements _i2.MovieDetailed {
  _FakeMovieDetailed_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesRemoteDataSourceContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRemoteDataSourceContract extends _i1.Mock
    implements _i3.MoviesRemoteDataSourceContract {
  MockMoviesRemoteDataSourceContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Movie>> searchFor(String? title) => (super.noSuchMethod(
        Invocation.method(
          #searchFor,
          [title],
        ),
        returnValue: _i4.Future<List<_i5.Movie>>.value(<_i5.Movie>[]),
      ) as _i4.Future<List<_i5.Movie>>);
  @override
  _i4.Future<_i2.MovieDetailed> fetchDetails(String? title) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDetails,
          [title],
        ),
        returnValue: _i4.Future<_i2.MovieDetailed>.value(_FakeMovieDetailed_0(
          this,
          Invocation.method(
            #fetchDetails,
            [title],
          ),
        )),
      ) as _i4.Future<_i2.MovieDetailed>);
}

/// A class which mocks [MoviesLocalDataSourceContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesLocalDataSourceContract extends _i1.Mock
    implements _i6.MoviesLocalDataSourceContract {
  MockMoviesLocalDataSourceContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> updateFavourite(
    _i2.MovieDetailed? movie,
    bool? markFavourite,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFavourite,
          [
            movie,
            markFavourite,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i2.MovieDetailed>> getFavourites() => (super.noSuchMethod(
        Invocation.method(
          #getFavourites,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.MovieDetailed>>.value(<_i2.MovieDetailed>[]),
      ) as _i4.Future<List<_i2.MovieDetailed>>);
  @override
  _i4.Stream<dynamic> favouritesStream() => (super.noSuchMethod(
        Invocation.method(
          #favouritesStream,
          [],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);
}
