// Mocks generated by Mockito 5.3.2 from annotations
// in movies/test/features/movies/screens/movie_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/core/state_management/bloc_event.dart' as _i7;
import 'package:movies/core/state_management/cubit_state.dart' as _i3;
import 'package:movies/features/movies/cubit/search_cubit.dart' as _i4;
import 'package:movies/features/movies/movies_repository.dart' as _i2;
import 'package:movies/models/movie_detailed.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMoviesRepository_0 extends _i1.SmartFake
    implements _i2.MoviesRepository {
  _FakeMoviesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCubitState_1 extends _i1.SmartFake implements _i3.CubitState {
  _FakeCubitState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCubit extends _i1.Mock implements _i4.SearchCubit {
  MockSearchCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MoviesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMoviesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MoviesRepository);
  @override
  List<_i5.MovieDetailed> get favourites => (super.noSuchMethod(
        Invocation.getter(#favourites),
        returnValue: <_i5.MovieDetailed>[],
      ) as List<_i5.MovieDetailed>);
  @override
  bool get isSearchFieldEmpty => (super.noSuchMethod(
        Invocation.getter(#isSearchFieldEmpty),
        returnValue: false,
      ) as bool);
  @override
  _i3.CubitState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCubitState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.CubitState);
  @override
  _i6.Stream<_i3.CubitState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.CubitState>.empty(),
      ) as _i6.Stream<_i3.CubitState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<void> loadFavourites() => (super.noSuchMethod(
        Invocation.method(
          #loadFavourites,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void emit(_i3.CubitState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void add(_i7.BlocEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i7.BlocEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i7.BlocEvent>(
    _i8.EventHandler<E, _i3.CubitState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i8.Transition<_i7.BlocEvent, _i3.CubitState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void onChange(_i8.Change<_i3.CubitState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
